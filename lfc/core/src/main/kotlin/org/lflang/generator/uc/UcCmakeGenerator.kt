
package org.lflang.generator.uc

import org.lflang.FileConfig
import org.lflang.target.TargetConfig
import org.lflang.generator.PrependOperator
import org.lflang.joinWithLn
import org.lflang.target.property.BuildTypeProperty
import org.lflang.target.property.PlatformProperty
import org.lflang.target.property.type.PlatformType
import org.lflang.toUnixString
import org.lflang.unreachable
import java.nio.file.Path

class UcCmakeGenerator(private val targetConfig: TargetConfig, private val fileConfig: FileConfig) {
    private val S = '$' // a little trick to escape the dollar sign with $S
    private val platform = targetConfig.get(PlatformProperty.INSTANCE).platform

    fun generateCmake(sources: List<Path>) =
        if (platform == PlatformType.Platform.AUTO) {
            generateCmakePosix(sources)
        } else {
            generateCmakeEmbedded(sources)
        }

    fun generateCmakeEmbedded(sources: List<Path>) = with(PrependOperator) {
        """
            |# This file is generated by LFC. It is meant to be included in
            |# an existing CMake project. 
            |
            |set(LF_SOURCES
        ${" |    "..sources.joinWithLn { "$S{CMAKE_CURRENT_LIST_DIR}/${it.toUnixString()}"}}
            |)
            |set(REACTOR_UC_PATH $S{CMAKE_CURRENT_LIST_DIR}/reactor-uc)
            |set(LF_INCLUDE_DIRS $S{CMAKE_CURRENT_LIST_DIR})
        """.trimMargin()
    }

    fun generateCmakePosix(sources: List<Path>) = with(PrependOperator) {
        """
            |cmake_minimum_required(VERSION 3.5)
            |project(${fileConfig.name} VERSION 0.0.0 LANGUAGES C)
            |set(PLATFORM POSIX CACHE STRING "Target platform")
            |
            |set(LF_MAIN_TARGET ${fileConfig.name})
            |set(SOURCES
        ${" |    "..sources.joinWithLn { it.toUnixString() }}
            |)
            |add_executable($S{LF_MAIN_TARGET} $S{SOURCES})
            |install(TARGETS $S{LF_MAIN_TARGET}
            |        RUNTIME DESTINATION $S{CMAKE_INSTALL_BINDIR}
            |        OPTIONAL
            |)
            |
            |add_subdirectory(reactor-uc)
            |target_link_libraries($S{LF_MAIN_TARGET} PRIVATE reactor-uc)
            |target_include_directories($S{LF_MAIN_TARGET} PRIVATE $S{CMAKE_CURRENT_LIST_DIR})
            |
        """.trimMargin()
    }
}
