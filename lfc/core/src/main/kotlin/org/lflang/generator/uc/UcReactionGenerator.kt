package org.lflang.generator.uc

import org.lflang.*
import org.lflang.generator.PrependOperator
import org.lflang.generator.uc.UcReactorGenerator.Companion.codeType
import org.lflang.lf.*

class UcReactionGenerator(
    private val reactor: Reactor,
    private val portGenerator: UcPortGenerator
) {
    val Reaction.codeType
        get(): String = name ?: "${reactor.codeType}_Reaction$index" // Must match what is generated by the macro reactor-uc
    val Reaction.codeName
        get(): String = name ?: "reaction$index"
    val Reaction.bodyFuncName
        get(): String = name ?: "${reactor.codeType}_Reaction${index}_body"
    val Reaction.index
        get(): Int = priority-1

    private val TriggerRef.scope
        get() = when {
            this is BuiltinTriggerRef && this.type == BuiltinTrigger.STARTUP  -> "SCOPE_STARTUP(${reactor.codeType});"
            this is BuiltinTriggerRef && this.type == BuiltinTrigger.SHUTDOWN -> "SCOPE_SHUTDOWN(${reactor.codeType});"
            this is VarRef                                                    -> scope
            else                                                              -> AssertionError("Unexpected trigger type")
        }

    private val VarRef.scope
        get() =
            when (val variable = this.variable) {
                is Timer  -> "SCOPE_TIMER(${reactor.codeType}, ${name});"
                is Action -> "SCOPE_ACTION(${reactor.codeType}, ${name});"
                is Output -> "SCOPE_PORT(${reactor.codeType}, ${name});"
                is Input-> "SCOPE_PORT(${reactor.codeType}, ${name});"
                else      -> AssertionError("Unexpected variable type")
            }

    private fun registerSource(varRef: VarRef, reaction: Reaction) =
        when (val variable = varRef.variable) {
            is Action -> "ACTION_REGISTER_SOURCE(${varRef.name}, ${reaction.codeName});"
            is Output -> "OUTPUT_REGISTER_SOURCE(${varRef.name}, ${reaction.codeName});"
            is Input -> "INPUT_REGISTER_SOURCE(${varRef.name}, ${reaction.codeName});"
            else -> throw AssertionError("Unexpected variable type ${varRef}")
        }

    private fun registerEffect(triggerRef: TriggerRef, reaction: Reaction) =
        when {
            triggerRef is BuiltinTriggerRef && triggerRef.type == BuiltinTrigger.STARTUP  -> "STARTUP_REGISTER_EFFECT(${reaction.codeName});"
            triggerRef is BuiltinTriggerRef && triggerRef.type == BuiltinTrigger.SHUTDOWN -> "SHUTDOWN_REGISTER_EFFECT(${reaction.codeName});"
            triggerRef is VarRef -> registerEffect(triggerRef as VarRef, reaction)
            else -> throw AssertionError("Unexpected variable type")
        }

    private fun registerEffect(varRef: VarRef, reaction: Reaction) =
        when (val variable = varRef.variable) {
            is Timer -> "TIMER_REGISTER_EFFECT(${varRef.name}, ${reaction.codeName});"
            is Action -> "ACTION_REGISTER_EFFECT(${varRef.name}, ${reaction.codeName});"
            is Output -> "OUTPUT_REGISTER_EFFECT(${varRef.name}, ${reaction.codeName});"
            is Input -> "INPUT_REGISTER_EFFECT(${varRef.name}, ${reaction.codeName});"
            else -> throw AssertionError("Unexpected variable type")
        }

    fun generateReactionCtor(reaction: Reaction) = "DEFINE_REACTION_CTOR(${reactor.codeType}, ${reaction.codeName}, ${reaction.index});"
    fun generateSelfStruct(reaction: Reaction) = "DEFINE_REACTION_STRUCT(${reactor.codeType}, ${reaction.codeName}, ${reaction.allUncontainedEffects.size});"

    fun generateSelfStructs() =
        reactor.reactions.joinToString(
            separator = "\n",
            prefix = "// Reaction structs\n",
            postfix = "\n"
        ) { generateSelfStruct(it) };

    fun generateReactorStructFields() =
        reactor.reactions.joinToString(
            separator = "\n",
            postfix = "\n"
        ) {
            "REACTION_INSTANCE(${reactor.codeType}, ${it.codeName});"
        };

    fun generateReactionCtors() =
        reactor.reactions.joinToString(
            separator = "\n",
            prefix = "// Reaction constructors\n",
            postfix = "\n"
        ) { generateReactionCtor(it) };

    fun generateReactionBodies() =
        reactor.reactions.joinToString(
            separator = "\n",
            prefix = "// Reaction bodies\n",
            postfix = "\n"
        ) { generateReactionBody(it) };

    fun generateReactionBody(reaction: Reaction) = with(PrependOperator) {
        """
            | DEFINE_REACTION_BODY(${reactor.codeType}, ${reaction.codeName}) {
            |   // Bring expected variable names into scope
            |   SCOPE_SELF(${reactor.codeType});
            |   SCOPE_ENV();
            |   ${generateTriggersInScope(reaction)}
            |   // Start of user-witten reaction body
            |   ${reaction.code.toText()}
            |   // End of user-written reaction body
            | }
        """.trimMargin()
    }

    fun generateTriggersInScope(reaction: Reaction) =
        reaction.allUncontainedTriggers.plus(reaction.allUncontainedEffects).joinToString(separator = "\n"){it.scope.toString()}

    fun generateTriggerRegisterEffect(reaction: Reaction) =
        reaction.allUncontainedTriggers.joinToString(
            separator = "\n",
        ) {registerEffect(it, reaction).toString()}

    fun generateTriggerRegisterSource(reaction: Reaction) =
        reaction.allUncontainedEffects.joinToString(
            separator = "\n",
            ) {registerSource(it, reaction).toString()};

    fun generateRegisterEffects(reaction: Reaction) =
        reaction.allUncontainedEffects.joinToString(
            separator = "\n",
        ) {
            "REACTION_REGISTER_EFFECT(${reaction.codeName}, ${it.name});"
        };

    fun generateReactorCtorCode(reaction: Reaction) = with(PrependOperator) {
        """
            |INITIALIZE_REACTION(${reactor.codeType}, ${reaction.codeName});
            |// Register all triggers of this reaction.
        ${" |"..generateTriggerRegisterEffect(reaction)}
        ${" |"..generateTriggerRegisterSource(reaction)}
        ${" |"..generateRegisterEffects(reaction)}
            """.trimMargin()
    };

    fun generateReactorCtorCodes() =
        reactor.reactions.joinToString(separator = "\n", prefix = "// Initialize Reactions \n") { generateReactorCtorCode(it) }

    private val VarRef.isContainedRef: Boolean get() = container != null
        private val TriggerRef.isContainedRef: Boolean get() = this is VarRef && isContainedRef

    private fun VarRef.isEffectOf(reaction: Reaction): Boolean =
        reaction.effects.any { name == it.name && container?.name == it.container?.name }

    private fun TriggerRef.isEffectOf(reaction: Reaction): Boolean = this is VarRef && isEffectOf(reaction)

    private val Reaction.allUncontainedTriggers get() = triggers.filterNot { it.isEffectOf(this) || it.isContainedRef }
    private val Reaction.allUncontainedEffects get() = effects.filterNot { it.isContainedRef };

}
