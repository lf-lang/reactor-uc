
target uC {
  platform: Native,
}

reactor Src(id: int = 0) {
  output out: int
  input in: bool
  reaction(startup) -> out {=
    lf_set(out, self->id);
    validate(((FederatedEnvironment *)env)->do_clock_sync);
  =}

  reaction(in) {=
    env->request_shutdown(env);
  =}
}

reactor Dst {
  input in: int
  output out: bool
  state check: bool = false
  reaction(startup) {=
    validate(!((FederatedEnvironment *)env)->do_clock_sync);
  =}
  reaction(in) -> out {=
    validate(in->value == 42);
    self->check = true;
    env->request_shutdown(env);
    lf_set(out, true);
  =}

  reaction(shutdown) {=
    validate(self->check);
  =}
}


federated reactor {
  @clock_sync(grandmaster=true)  
  r1 = new Src(id=42)

  @clock_sync(disabled=true)  
  r2 = new Dst()

  r1.out -> r2.in 
  r2.out -> r1.in
}