// Source produces a dynamically allocated array, which it passes to Free. Free requests a writable
// copy, which, instead of copying, it just gets ownership of the original array. It then does
// nothing further with it. This test checks that the memory gets freed automatically even with the
// mutable input.
target uC {
  platform: Native,
  timeout: 1 sec,
  fast: true
}

import Source, Print from "ArrayPrint.lf"
import Scale from "ArrayScale.lf"

preamble {=
  #include "reactor-uc/reactor-c.h"
=}

reactor Free(scale: int = 2, size: int = 3) {
  input in: int[3]

  reaction(in) {=
    for(int i = 0; i < 3; i++) {
      in->value[i] *= self->scale;
    }
  =}
}

main reactor ArrayFree {
  s = new Source()
  c = new Free()
  c2 = new Scale()
  p = new Print(scale=2)
  s.out -> c.in
  s.out -> c2.in
  c2.out -> p.in
}
