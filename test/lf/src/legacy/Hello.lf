// This test checks that logical time is incremented an appropriate amount as a result of an
// invocation of the lf_schedule() function at runtime. It also performs various smoke tests of
// timing aligned reactions. The first instance has a period of 4 seconds, the second of 2 seconds,
// and the third (composite) or 1 second.
target uC {
  platform: Native,

  timeout: 10 sec,
  fast: true
}

preamble {=
  #include "reactor-uc/reactor-c.h"
  #include <time.h>
=}

reactor Reschedule(period: time = 2 sec) {
  state count: int = 0
  state previous_time: instant_t = 0
  timer t(1 sec, period)
  logical action a

  reaction(t) -> a {=
    printf("Hello World");
    lf_schedule(a, MSEC(200));
    // Print the current time.
    self->previous_time = lf_time_logical();
    time_t secs = self->previous_time/BILLION;
    printf("Current time is " PRINTF_TIME "\n", self->previous_time);
    printf("Which is %sPlus " PRINTF_TIME " nanoseconds.\n", ctime(&secs), self->previous_time % BILLION);
  =}

  reaction(a) {=
    (self->count)++;
    printf("***** action %d at time " PRINTF_TIME "\n", self->count, lf_time_logical());
    // Check the a_has_value variable.
    long long time = lf_time_logical();
    if (time - self->previous_time != 200000000ll) {
      printf("FAILURE: Expected 200ms of logical time to elapse but got " PRINTF_TIME " nanoseconds.\n",
        time - self->previous_time
      );
      exit(1);
    }
  =}
}

reactor Inside(period: time = 1 sec) {
  third_instance = new Reschedule(period=period)
}

main reactor Hello {
  first_instance = new Reschedule(period = 4 sec)
  second_instance = new Reschedule()
  composite_instance = new Inside()
}
