/**
 * This test ensures that level 2 reaction with a tighter deadline runs before a level 1 reaction
 * with a looser deadline when there is no dependency between these reactions. This is the correct
 * behavior of the GEDF scheduler, so the scheduler is set to GEDF_NP.
 */
target uC {
  platform: Native,
  timeout: 200 ms,
}

preamble {=
  #include "reactor-uc/reactor-c.h"
=}

reactor Periodic(period: time = 50 ms, name: char = 'A') {
  timer trigger(0, period)

  output t: instant_t

  reaction(trigger) -> t {=
    instant_t start_time = lf_time_physical_elapsed();
    lf_set(t, start_time);
    lf_print("%c started at physical time: " PRINTF_TIME, self->name, start_time);
  =}
}

reactor Probe(dl: time = 2 ms, name: char = 'B') {
  input i: instant_t
  output t: instant_t

  reaction(i) -> t {=
    instant_t start_time = lf_time_physical_elapsed();
    lf_set(t, start_time);
    lf_print("%c started at physical time: " PRINTF_TIME, self->name, start_time);
  =} deadline(dl) {=
    instant_t start_time = lf_time_physical_elapsed();
    lf_set(t, start_time);
    lf_print("%c VIOLATED DEADLINE at physical time: " PRINTF_TIME, self->name, start_time);
  =}
}

main reactor {
  task1 = new Periodic(period = 50 ms, name='A')
  detector1 = new Probe(dl = 50 ms, name='B')

  task1.t -> detector1.i
  task2 = new Periodic(period = 50 ms, name='C')
  detector2 = new Probe(dl = 25 ms, name='D')

  task2.t -> detector2.i

  reaction(task1.t, detector2.t) {=
    if (lf_is_present(task1.t) && lf_is_present(detector2.t) && task1.t->value < detector2.t->value) {
      lf_print_error_and_exit("EDF policy violated. detector2 should execute before task1 when both are triggered.");
    }
  =}
}
